[#ftl]
[#--template for the client class.--]
// Generated by xsd compiler for ES6
// DO NOT CHANGE!

"use strict";

[#function getSimpleFieldES6Type type]
	[#if type.enum]
		[#local fieldType = "type : 'string', pattern : /${enumConstants[type.name]}/"]
	[#elseif type.collection]
		[#local fieldType = "type : 'array', items : { ${getSimpleFieldES6Type(type.typeParameters[0])} }"]
	[#elseif type.name == "String"]
		[#local fieldType= "type : 'string'"]
	[#elseif type.name?lower_case == "integer" || type.name?lower_case == "float" || type.name?lower_case == "double" || type.name?lower_case == "long" || type.name == "int" ]
		[#local fieldType = "type : 'number'"]
	[#elseif type.name?lower_case == "boolean" ]
		[#local fieldType = "type : 'boolean'"]
	[#elseif type.name == "XMLGregorianCalendar" || type.name == "Date" || type.name == "ZonedDateTime" ]
		[#local fieldType = "type : 'string', format: 'date-time-iso-8601'"]
	[#else]
		[#local fieldType = "$ref : '/${type.name}' "]
	[/#if]
	[#return fieldType]
[/#function]


[#function getOptionnalFieldES6Type type]
	[#if type.enum]
		[#local fieldType = "type : ['string', null], pattern : /${enumConstants[type.name]}/"]
	[#elseif type.collection]
		[#local fieldType = "type : 'array', items : { ${getSimpleFieldES6Type(type.typeParameters[0])} }"]
	[#elseif type.name == "String"]
		[#local fieldType= "type : ['string', null]"]
	[#elseif type.name?lower_case == "integer" || type.name?lower_case == "float" || type.name?lower_case == "double" || type.name?lower_case == "long" || type.name == "int" ]
		[#local fieldType = "type : ['number', null]"]
	[#elseif type.name?lower_case == "boolean" ]
		[#local fieldType = "type : 'boolean'"]
	[#elseif type.name == "XMLGregorianCalendar" || type.name == "Date" || type.name == "ZonedDateTime" ]
		[#local fieldType = "type : ['string', null], format: 'date-time-iso-8601'"]
	[#else]
		[#local fieldType = "$ref : '/${type.name}' "]
	[/#if]
	[#return fieldType]
[/#function]

[#function getFieldES6Type field]
	[#if field.required]
		[#local fieldType = "${getSimpleFieldES6Type(field.type)}"]
		[#return fieldType]
	[#else]
		[#local fieldType = "${getOptionnalFieldES6Type(field.type)}"]
		[#return fieldType]
	[/#if]
[/#function]

[#function getIsRequired field]
	[#if field.required]
		[#local required = "required : true"]
	[#else]
		[#local required = "required : false"]
	[/#if]
	[#return required]
[/#function]

//////////////////////////////////////////////////////////////////////
// Modules
//////////////////////////////////////////////////////////////////////

const moment = require('moment');
const Validator = require('jsonschema').Validator;
const helpers = require('jsonschema/lib/helpers');

//////////////////////////////////////////////////////////////////////
// Init
//////////////////////////////////////////////////////////////////////


helpers.FORMAT_REGEXPS["date-time-iso-8601"] =  function (input) {
	let result = true;

	try {
		result = moment(input, 'YYYY-MM-DDTHH:mm:ssZ', true).isValid();
	} catch (e) {
		result = false;
	}

	return result;
};

let validator = new Validator();

//////////////////////////////////////////////////////////////////////
// Functions
//////////////////////////////////////////////////////////////////////

let addSchema =  function (schema) {
	validator.addSchema(schema, schema.id);
};

let validate = function (data, id, options) {
	options = options || {} ;
	options.propertyName = options.propertyName || 'body';
	return validator.validate(data, validator.getSchema(id), options);
};

//////////////////////////////////////////////////////////////////////
// Schemas
//////////////////////////////////////////////////////////////////////

[#list classes as clazz]
[#if clazz.fields?size > 0 || clazz.superClassesFields?size > 0]
let ${clazz.name?uncap_first}Schema = {
	id: '/${clazz.name}',
	type: 'object',
	additionalProperties: false,
	properties: {
	[#list clazz.allFields as field]
		${field.initialName} : { ${getFieldES6Type(field)}, ${getIsRequired(field)}[#if field.required && field.type.collection], minItems: 1[/#if] }[#sep], [/#sep]
	[/#list]
	}
};
[/#if]

[/#list]

[#list classes as clazz]
[#if clazz.fields?size > 0 || clazz.superClassesFields?size > 0]
addSchema(${clazz.name?uncap_first}Schema);
[/#if]
[/#list]

//////////////////////////////////////////////////////////////////////
// Exports
//////////////////////////////////////////////////////////////////////

module.exports = {
	addSchema,
	validate,
	availableSchemas: validator.schemas
};