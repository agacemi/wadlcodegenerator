[#ftl]
[#--template for the client class.
    Beware! Coffee script is a tabulation based language, you should use tabs.
--]
# Generated by xsd compiler for coffeescript
# DO NOT CHANGE!

[#function getSimpleFieldCoffeeType type]
	[#if type.enum]
		[#local fieldType = "type : 'string', pattern : /${enumConstants[type.name]}/"]
	[#elseif type.collection]
		[#local fieldType = "type : 'array', items : { ${getSimpleFieldCoffeeType(type.typeParameters[0])} }"]
	[#elseif type.name == "String"]
		[#local fieldType= "type : 'string'"]
	[#elseif type.name?lower_case == "integer" || type.name?lower_case == "float" || type.name?lower_case == "double" || type.name?lower_case == "long" || type.name == "int" ]
		[#local fieldType = "type : 'number'"]
	[#elseif type.name?lower_case == "boolean" ]
		[#local fieldType = "type : 'boolean'"]
	[#elseif type.name == "XMLGregorianCalendar" || type.name == "Date" || type.name == "ZonedDateTime" ]
		[#local fieldType = "type : 'string', format: 'date-time-iso-8601'"]
	[#else]
		[#local fieldType = "$ref : '/${type.name}' "]
	[/#if]
	[#return fieldType]
[/#function]


[#function getOptionnalFieldCoffeeType type]
	[#if type.enum]
		[#local fieldType = "type : ['string', null], pattern : /${enumConstants[type.name]}/"]
	[#elseif type.collection]
		[#local fieldType = "type : 'array', items : { ${getSimpleFieldCoffeeType(type.typeParameters[0])} }"]
	[#elseif type.name == "String"]
		[#local fieldType= "type : ['string', null]"]
	[#elseif type.name?lower_case == "integer" || type.name?lower_case == "float" || type.name?lower_case == "double" || type.name?lower_case == "long" || type.name == "int" ]
		[#local fieldType = "type : ['number', null]"]
	[#elseif type.name?lower_case == "boolean" ]
		[#local fieldType = "type : 'boolean'"]
	[#elseif type.name == "XMLGregorianCalendar" || type.name == "Date" || type.name == "ZonedDateTime" ]
		[#local fieldType = "type : ['string', null], format: 'date-time-iso-8601'"]
	[#else]
		[#local fieldType = "$ref : '/${type.name}' "]
	[/#if]
	[#return fieldType]
[/#function]

[#function getFieldCoffeeType field]
	[#if field.required]
		[#local fieldType = "${getSimpleFieldCoffeeType(field.type)}"]
		[#return fieldType]
	[#else]
		[#local fieldType = "${getOptionnalFieldCoffeeType(field.type)}"]
		[#return fieldType]
	[/#if]
[/#function]

[#function getIsRequired field]
	[#if field.required]
		[#local required = "required : true"]
	[#else]
		[#local required = "required : false"]
	[/#if]
	[#return required]
[/#function]


####################################################################
# Modules
####################################################################

moment = require 'moment'
Validator = require('jsonschema').Validator;
helpers = require 'jsonschema/lib/helpers'

####################################################################
# Init
####################################################################


helpers.FORMAT_REGEXPS["date-time-iso-8601"] = (input) ->
	result = true;
	try
		result = moment(input, 'YYYY-MM-DDTHH:mm:ssZ', true).isValid()
	catch e
		result = false

	result

validator = new Validator();

####################################################################
# Functions
####################################################################

addSchema = (schema) ->
	validator.addSchema(schema, schema.id)

validate = (data, id, options) ->
	options = options || {}
	options.propertyName = options.propertyName || 'body'
	validator.validate(data, validator.getSchema(id), options)

####################################################################
# Schemas
####################################################################

[#-- /!\ Attention aux tabulations --]

[#list classes as clazz]
[#if clazz.fields?size > 0 || clazz.superClassesFields?size > 0]
${clazz.name?uncap_first}Schema =
	id: '/${clazz.name}'
	type: 'object'
	additionalProperties: false
	properties:
	[#list clazz.superClassesFields as field]
		${field.initialName} : { ${getFieldCoffeeType(field)}, ${getIsRequired(field)} }
	[/#list]
	[#list clazz.fields as field]
		${field.initialName} : { ${getFieldCoffeeType(field)}, ${getIsRequired(field)} [#if field.required && field.type.collection], minItems: 1[/#if] }
	[/#list]
[/#if]

[/#list]

[#list classes as clazz]
[#if clazz.fields?size > 0 || clazz.superClassesFields?size > 0]
addSchema(${clazz.name?uncap_first}Schema)
[/#if]
[/#list]

####################################################################
# Exports
####################################################################

module.exports =
	addSchema: addSchema
	validate: validate
	availableSchemas: validator.schemas